(a)
N分木のノードを表すTreeNode：【インタフェース】

<理由>
TreeNodeのメソッドとして、関連付けられたオブジェクトを返すメソッド、親ノード
を返すメソッド、子ノードのリストを返すメソッド、子ノードの数を返すメソッドが
考えられる。
これらのメソッドの実装は、木構造を何分木にするか決定してから決まるものである
ため、抽象メソッドとするのが適切である。
また、TreeNodeはノードに関するメソッドのみを定義しているため、実装クラスは
(b)のTreeWalkerのような他のインタフェースを多重継承する可能性がある。よって、
多重継承の形式を提供するインタフェースにするのが適切である。


(b)
特定の順番（深さ優先、幅優先など）で木を探索するTreeWalker：【インタフェース】

<理由>
TreeWalkerのメソッドとして、指定した要素が存在するか調べるメソッドや、指定した
順番の要素を返すメソッドが考えられる。
これらのメソッドの実装は、木構造の種類や探索の順番を決定してから決まるもので
あるため、抽象メソッドとするのが適切である。
また、TreeWalkerは探索に関するメソッドのみを定義しているため、実装クラスは
(a)のTreeNodeのような他のインタフェースを多重継承する可能性がある。よって、
多重継承の形式を提供するインタフェースにするのが適切である。



(c)
グラフィックシステムにより描画可能なオブジェクトのためのDrawable：【インタフェース】

<理由>
インタフェースは、オブジェクトは何が「できる」かという意味で定義されることが
多い(P101)。Drawableは、描画「できる」という意味で定義されるため、インタフェース
にするのが適切だと考えた。
Drawableはオブジェクトを描画するdraw()メソッドを持つ。このメソッドは描画する
オブジェクトの種類（ベクタデータ、ラスタデータなど）に応じて、実装される。


(d)
グラフィックデスクトップから実行できるプログラムのためのApplication：【具象クラス】

<理由>
プログラムに対するエントリポイントが1つに固定されているため、プログラムを実行する
ためのメソッドはApplicationクラス内で実装でき、抽象メソッドとすべきメソッドは存在
しないと考えた。

